/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKBNO085_SPI_LIBRARY_H
#define _MOCKBNO085_SPI_LIBRARY_H

#include "unity.h"
#include "BNO085_SPI_Library.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void MockBNO085_SPI_Library_Init(void);
void MockBNO085_SPI_Library_Destroy(void);
void MockBNO085_SPI_Library_Verify(void);




#define register_Sensor_ExpectAndReturn(sensor, sensor_number, sensor_CSN_Pin, sensor_CSN_Port, sensor_INTN_Pin, sensor_INTN_Port, sensor_RSTN_Pin, sensor_RSTN_Port, cmock_retval) TEST_FAIL_MESSAGE("register_Sensor requires _Expect (not AndReturn)");
#define register_Sensor_Expect(sensor, sensor_number, sensor_CSN_Pin, sensor_CSN_Port, sensor_INTN_Pin, sensor_INTN_Port, sensor_RSTN_Pin, sensor_RSTN_Port) register_Sensor_CMockExpect(__LINE__, sensor, sensor_number, sensor_CSN_Pin, sensor_CSN_Port, sensor_INTN_Pin, sensor_INTN_Port, sensor_RSTN_Pin, sensor_RSTN_Port)
void register_Sensor_CMockExpect(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t sensor_number, uint16_t sensor_CSN_Pin, GPIO_TypeDef* sensor_CSN_Port, uint16_t sensor_INTN_Pin, GPIO_TypeDef* sensor_INTN_Port, uint16_t sensor_RSTN_Pin, GPIO_TypeDef* sensor_RSTN_Port);
typedef void (* CMOCK_register_Sensor_CALLBACK)(sensor_meta* sensor, uint8_t sensor_number, uint16_t sensor_CSN_Pin, GPIO_TypeDef* sensor_CSN_Port, uint16_t sensor_INTN_Pin, GPIO_TypeDef* sensor_INTN_Port, uint16_t sensor_RSTN_Pin, GPIO_TypeDef* sensor_RSTN_Port, int cmock_num_calls);
void register_Sensor_AddCallback(CMOCK_register_Sensor_CALLBACK Callback);
void register_Sensor_Stub(CMOCK_register_Sensor_CALLBACK Callback);
#define register_Sensor_StubWithCallback register_Sensor_Stub
#define register_Sensor_ExpectWithArrayAndReturn(sensor, sensor_Depth, sensor_number, sensor_CSN_Pin, sensor_CSN_Port, sensor_CSN_Port_Depth, sensor_INTN_Pin, sensor_INTN_Port, sensor_INTN_Port_Depth, sensor_RSTN_Pin, sensor_RSTN_Port, sensor_RSTN_Port_Depth, cmock_retval) TEST_FAIL_MESSAGE("register_Sensor requires _ExpectWithArray (not AndReturn)");
#define register_Sensor_ExpectWithArray(sensor, sensor_Depth, sensor_number, sensor_CSN_Pin, sensor_CSN_Port, sensor_CSN_Port_Depth, sensor_INTN_Pin, sensor_INTN_Port, sensor_INTN_Port_Depth, sensor_RSTN_Pin, sensor_RSTN_Port, sensor_RSTN_Port_Depth) register_Sensor_CMockExpectWithArray(__LINE__, sensor, (sensor_Depth), sensor_number, sensor_CSN_Pin, sensor_CSN_Port, (sensor_CSN_Port_Depth), sensor_INTN_Pin, sensor_INTN_Port, (sensor_INTN_Port_Depth), sensor_RSTN_Pin, sensor_RSTN_Port, (sensor_RSTN_Port_Depth))
void register_Sensor_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t sensor_number, uint16_t sensor_CSN_Pin, GPIO_TypeDef* sensor_CSN_Port, int sensor_CSN_Port_Depth, uint16_t sensor_INTN_Pin, GPIO_TypeDef* sensor_INTN_Port, int sensor_INTN_Port_Depth, uint16_t sensor_RSTN_Pin, GPIO_TypeDef* sensor_RSTN_Port, int sensor_RSTN_Port_Depth);
#define clear_init_Message_IMU_Expect(sensor) TEST_FAIL_MESSAGE("clear_init_Message_IMU requires _ExpectAndReturn");
#define clear_init_Message_IMU_ExpectAndReturn(sensor, cmock_retval) clear_init_Message_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void clear_init_Message_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_clear_init_Message_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void clear_init_Message_IMU_AddCallback(CMOCK_clear_init_Message_IMU_CALLBACK Callback);
void clear_init_Message_IMU_Stub(CMOCK_clear_init_Message_IMU_CALLBACK Callback);
#define clear_init_Message_IMU_StubWithCallback clear_init_Message_IMU_Stub
#define clear_init_Message_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("clear_init_Message_IMU requires _ExpectWithArrayAndReturn");
#define clear_init_Message_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) clear_init_Message_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void clear_init_Message_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define hardreset_IMUs_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("hardreset_IMUs requires _Expect (not AndReturn)");
#define hardreset_IMUs_Expect() hardreset_IMUs_CMockExpect(__LINE__)
void hardreset_IMUs_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_hardreset_IMUs_CALLBACK)(int cmock_num_calls);
void hardreset_IMUs_AddCallback(CMOCK_hardreset_IMUs_CALLBACK Callback);
void hardreset_IMUs_Stub(CMOCK_hardreset_IMUs_CALLBACK Callback);
#define hardreset_IMUs_StubWithCallback hardreset_IMUs_Stub
#define softreset_IMU_Expect(sensor) TEST_FAIL_MESSAGE("softreset_IMU requires _ExpectAndReturn");
#define softreset_IMU_ExpectAndReturn(sensor, cmock_retval) softreset_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void softreset_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_softreset_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void softreset_IMU_AddCallback(CMOCK_softreset_IMU_CALLBACK Callback);
void softreset_IMU_Stub(CMOCK_softreset_IMU_CALLBACK Callback);
#define softreset_IMU_StubWithCallback softreset_IMU_Stub
#define softreset_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("softreset_IMU requires _ExpectWithArrayAndReturn");
#define softreset_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) softreset_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void softreset_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define softresetDCD_IMU_Expect(sensor) TEST_FAIL_MESSAGE("softresetDCD_IMU requires _ExpectAndReturn");
#define softresetDCD_IMU_ExpectAndReturn(sensor, cmock_retval) softresetDCD_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void softresetDCD_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_softresetDCD_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void softresetDCD_IMU_AddCallback(CMOCK_softresetDCD_IMU_CALLBACK Callback);
void softresetDCD_IMU_Stub(CMOCK_softresetDCD_IMU_CALLBACK Callback);
#define softresetDCD_IMU_StubWithCallback softresetDCD_IMU_Stub
#define softresetDCD_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("softresetDCD_IMU requires _ExpectWithArrayAndReturn");
#define softresetDCD_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) softresetDCD_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void softresetDCD_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define get_and_clear_Reset_Status_Expect(sensor) TEST_FAIL_MESSAGE("get_and_clear_Reset_Status requires _ExpectAndReturn");
#define get_and_clear_Reset_Status_ExpectAndReturn(sensor, cmock_retval) get_and_clear_Reset_Status_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_and_clear_Reset_Status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, bool cmock_to_return);
typedef bool (* CMOCK_get_and_clear_Reset_Status_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_and_clear_Reset_Status_AddCallback(CMOCK_get_and_clear_Reset_Status_CALLBACK Callback);
void get_and_clear_Reset_Status_Stub(CMOCK_get_and_clear_Reset_Status_CALLBACK Callback);
#define get_and_clear_Reset_Status_StubWithCallback get_and_clear_Reset_Status_Stub
#define get_and_clear_Reset_Status_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_and_clear_Reset_Status requires _ExpectWithArrayAndReturn");
#define get_and_clear_Reset_Status_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_and_clear_Reset_Status_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_and_clear_Reset_Status_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, bool cmock_to_return);
#define enable_Accelerometer_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_Accelerometer requires _ExpectAndReturn");
#define enable_Accelerometer_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_Accelerometer_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_Accelerometer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_Accelerometer_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_Accelerometer_AddCallback(CMOCK_enable_Accelerometer_CALLBACK Callback);
void enable_Accelerometer_Stub(CMOCK_enable_Accelerometer_CALLBACK Callback);
#define enable_Accelerometer_StubWithCallback enable_Accelerometer_Stub
#define enable_Accelerometer_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_Accelerometer requires _ExpectWithArrayAndReturn");
#define enable_Accelerometer_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_Accelerometer_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_Accelerometer_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_LinearAcceleration_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_LinearAcceleration requires _ExpectAndReturn");
#define enable_LinearAcceleration_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_LinearAcceleration_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_LinearAcceleration_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_LinearAcceleration_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_LinearAcceleration_AddCallback(CMOCK_enable_LinearAcceleration_CALLBACK Callback);
void enable_LinearAcceleration_Stub(CMOCK_enable_LinearAcceleration_CALLBACK Callback);
#define enable_LinearAcceleration_StubWithCallback enable_LinearAcceleration_Stub
#define enable_LinearAcceleration_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_LinearAcceleration requires _ExpectWithArrayAndReturn");
#define enable_LinearAcceleration_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_LinearAcceleration_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_LinearAcceleration_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_Gravity_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_Gravity requires _ExpectAndReturn");
#define enable_Gravity_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_Gravity_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_Gravity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_Gravity_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_Gravity_AddCallback(CMOCK_enable_Gravity_CALLBACK Callback);
void enable_Gravity_Stub(CMOCK_enable_Gravity_CALLBACK Callback);
#define enable_Gravity_StubWithCallback enable_Gravity_Stub
#define enable_Gravity_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_Gravity requires _ExpectWithArrayAndReturn");
#define enable_Gravity_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_Gravity_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_Gravity_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_RotationVector_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_RotationVector requires _ExpectAndReturn");
#define enable_RotationVector_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_RotationVector_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_RotationVector_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_RotationVector_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_RotationVector_AddCallback(CMOCK_enable_RotationVector_CALLBACK Callback);
void enable_RotationVector_Stub(CMOCK_enable_RotationVector_CALLBACK Callback);
#define enable_RotationVector_StubWithCallback enable_RotationVector_Stub
#define enable_RotationVector_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_RotationVector requires _ExpectWithArrayAndReturn");
#define enable_RotationVector_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_RotationVector_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_RotationVector_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_ARVR_stabilized_RotationVector_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_ARVR_stabilized_RotationVector requires _ExpectAndReturn");
#define enable_ARVR_stabilized_RotationVector_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_ARVR_stabilized_RotationVector_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_ARVR_stabilized_RotationVector_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_ARVR_stabilized_RotationVector_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_ARVR_stabilized_RotationVector_AddCallback(CMOCK_enable_ARVR_stabilized_RotationVector_CALLBACK Callback);
void enable_ARVR_stabilized_RotationVector_Stub(CMOCK_enable_ARVR_stabilized_RotationVector_CALLBACK Callback);
#define enable_ARVR_stabilized_RotationVector_StubWithCallback enable_ARVR_stabilized_RotationVector_Stub
#define enable_ARVR_stabilized_RotationVector_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_ARVR_stabilized_RotationVector requires _ExpectWithArrayAndReturn");
#define enable_ARVR_stabilized_RotationVector_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_ARVR_stabilized_RotationVector_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_ARVR_stabilized_RotationVector_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_GameRotationVector_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_GameRotationVector requires _ExpectAndReturn");
#define enable_GameRotationVector_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_GameRotationVector_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_GameRotationVector_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_GameRotationVector_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_GameRotationVector_AddCallback(CMOCK_enable_GameRotationVector_CALLBACK Callback);
void enable_GameRotationVector_Stub(CMOCK_enable_GameRotationVector_CALLBACK Callback);
#define enable_GameRotationVector_StubWithCallback enable_GameRotationVector_Stub
#define enable_GameRotationVector_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_GameRotationVector requires _ExpectWithArrayAndReturn");
#define enable_GameRotationVector_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_GameRotationVector_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_GameRotationVector_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_ARVR_stabilized_GameRotationVector_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_ARVR_stabilized_GameRotationVector requires _ExpectAndReturn");
#define enable_ARVR_stabilized_GameRotationVector_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_ARVR_stabilized_GameRotationVector_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_ARVR_stabilized_GameRotationVector_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_ARVR_stabilized_GameRotationVector_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_ARVR_stabilized_GameRotationVector_AddCallback(CMOCK_enable_ARVR_stabilized_GameRotationVector_CALLBACK Callback);
void enable_ARVR_stabilized_GameRotationVector_Stub(CMOCK_enable_ARVR_stabilized_GameRotationVector_CALLBACK Callback);
#define enable_ARVR_stabilized_GameRotationVector_StubWithCallback enable_ARVR_stabilized_GameRotationVector_Stub
#define enable_ARVR_stabilized_GameRotationVector_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_ARVR_stabilized_GameRotationVector requires _ExpectWithArrayAndReturn");
#define enable_ARVR_stabilized_GameRotationVector_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_ARVR_stabilized_GameRotationVector_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_ARVR_stabilized_GameRotationVector_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_StabilityClassifier_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_StabilityClassifier requires _ExpectAndReturn");
#define enable_StabilityClassifier_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_StabilityClassifier_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_StabilityClassifier_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_StabilityClassifier_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_StabilityClassifier_AddCallback(CMOCK_enable_StabilityClassifier_CALLBACK Callback);
void enable_StabilityClassifier_Stub(CMOCK_enable_StabilityClassifier_CALLBACK Callback);
#define enable_StabilityClassifier_StubWithCallback enable_StabilityClassifier_Stub
#define enable_StabilityClassifier_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_StabilityClassifier requires _ExpectWithArrayAndReturn");
#define enable_StabilityClassifier_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_StabilityClassifier_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_StabilityClassifier_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define enable_TapDetector_Expect(sensor, time_between_reports) TEST_FAIL_MESSAGE("enable_TapDetector requires _ExpectAndReturn");
#define enable_TapDetector_ExpectAndReturn(sensor, time_between_reports, cmock_retval) enable_TapDetector_CMockExpectAndReturn(__LINE__, sensor, time_between_reports, cmock_retval)
void enable_TapDetector_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t time_between_reports, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_enable_TapDetector_CALLBACK)(sensor_meta* sensor, uint16_t time_between_reports, int cmock_num_calls);
void enable_TapDetector_AddCallback(CMOCK_enable_TapDetector_CALLBACK Callback);
void enable_TapDetector_Stub(CMOCK_enable_TapDetector_CALLBACK Callback);
#define enable_TapDetector_StubWithCallback enable_TapDetector_Stub
#define enable_TapDetector_ExpectWithArray(sensor, sensor_Depth, time_between_reports) TEST_FAIL_MESSAGE("enable_TapDetector requires _ExpectWithArrayAndReturn");
#define enable_TapDetector_ExpectWithArrayAndReturn(sensor, sensor_Depth, time_between_reports, cmock_retval) enable_TapDetector_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), time_between_reports, cmock_retval)
void enable_TapDetector_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t time_between_reports, uint8_t cmock_to_return);
#define data_available_Expect(sensor) TEST_FAIL_MESSAGE("data_available requires _ExpectAndReturn");
#define data_available_ExpectAndReturn(sensor, cmock_retval) data_available_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void data_available_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, bool cmock_to_return);
typedef bool (* CMOCK_data_available_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void data_available_AddCallback(CMOCK_data_available_CALLBACK Callback);
void data_available_Stub(CMOCK_data_available_CALLBACK Callback);
#define data_available_StubWithCallback data_available_Stub
#define data_available_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("data_available requires _ExpectWithArrayAndReturn");
#define data_available_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) data_available_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void data_available_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, bool cmock_to_return);
#define get_Accelerometer_X_Expect(sensor) TEST_FAIL_MESSAGE("get_Accelerometer_X requires _ExpectAndReturn");
#define get_Accelerometer_X_ExpectAndReturn(sensor, cmock_retval) get_Accelerometer_X_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Accelerometer_X_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Accelerometer_X_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Accelerometer_X_AddCallback(CMOCK_get_Accelerometer_X_CALLBACK Callback);
void get_Accelerometer_X_Stub(CMOCK_get_Accelerometer_X_CALLBACK Callback);
#define get_Accelerometer_X_StubWithCallback get_Accelerometer_X_Stub
#define get_Accelerometer_X_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Accelerometer_X requires _ExpectWithArrayAndReturn");
#define get_Accelerometer_X_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Accelerometer_X_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Accelerometer_X_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Accelerometer_Y_Expect(sensor) TEST_FAIL_MESSAGE("get_Accelerometer_Y requires _ExpectAndReturn");
#define get_Accelerometer_Y_ExpectAndReturn(sensor, cmock_retval) get_Accelerometer_Y_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Accelerometer_Y_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Accelerometer_Y_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Accelerometer_Y_AddCallback(CMOCK_get_Accelerometer_Y_CALLBACK Callback);
void get_Accelerometer_Y_Stub(CMOCK_get_Accelerometer_Y_CALLBACK Callback);
#define get_Accelerometer_Y_StubWithCallback get_Accelerometer_Y_Stub
#define get_Accelerometer_Y_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Accelerometer_Y requires _ExpectWithArrayAndReturn");
#define get_Accelerometer_Y_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Accelerometer_Y_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Accelerometer_Y_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Accelerometer_Z_Expect(sensor) TEST_FAIL_MESSAGE("get_Accelerometer_Z requires _ExpectAndReturn");
#define get_Accelerometer_Z_ExpectAndReturn(sensor, cmock_retval) get_Accelerometer_Z_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Accelerometer_Z_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Accelerometer_Z_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Accelerometer_Z_AddCallback(CMOCK_get_Accelerometer_Z_CALLBACK Callback);
void get_Accelerometer_Z_Stub(CMOCK_get_Accelerometer_Z_CALLBACK Callback);
#define get_Accelerometer_Z_StubWithCallback get_Accelerometer_Z_Stub
#define get_Accelerometer_Z_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Accelerometer_Z requires _ExpectWithArrayAndReturn");
#define get_Accelerometer_Z_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Accelerometer_Z_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Accelerometer_Z_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Accelerometer_Accuracy_Expect(sensor) TEST_FAIL_MESSAGE("get_Accelerometer_Accuracy requires _ExpectAndReturn");
#define get_Accelerometer_Accuracy_ExpectAndReturn(sensor, cmock_retval) get_Accelerometer_Accuracy_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Accelerometer_Accuracy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_Accelerometer_Accuracy_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Accelerometer_Accuracy_AddCallback(CMOCK_get_Accelerometer_Accuracy_CALLBACK Callback);
void get_Accelerometer_Accuracy_Stub(CMOCK_get_Accelerometer_Accuracy_CALLBACK Callback);
#define get_Accelerometer_Accuracy_StubWithCallback get_Accelerometer_Accuracy_Stub
#define get_Accelerometer_Accuracy_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Accelerometer_Accuracy requires _ExpectWithArrayAndReturn");
#define get_Accelerometer_Accuracy_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Accelerometer_Accuracy_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Accelerometer_Accuracy_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define get_LinearAcceleration_X_Expect(sensor) TEST_FAIL_MESSAGE("get_LinearAcceleration_X requires _ExpectAndReturn");
#define get_LinearAcceleration_X_ExpectAndReturn(sensor, cmock_retval) get_LinearAcceleration_X_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_LinearAcceleration_X_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_LinearAcceleration_X_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_LinearAcceleration_X_AddCallback(CMOCK_get_LinearAcceleration_X_CALLBACK Callback);
void get_LinearAcceleration_X_Stub(CMOCK_get_LinearAcceleration_X_CALLBACK Callback);
#define get_LinearAcceleration_X_StubWithCallback get_LinearAcceleration_X_Stub
#define get_LinearAcceleration_X_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_LinearAcceleration_X requires _ExpectWithArrayAndReturn");
#define get_LinearAcceleration_X_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_LinearAcceleration_X_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_LinearAcceleration_X_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_LinearAcceleration_Y_Expect(sensor) TEST_FAIL_MESSAGE("get_LinearAcceleration_Y requires _ExpectAndReturn");
#define get_LinearAcceleration_Y_ExpectAndReturn(sensor, cmock_retval) get_LinearAcceleration_Y_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_LinearAcceleration_Y_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_LinearAcceleration_Y_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_LinearAcceleration_Y_AddCallback(CMOCK_get_LinearAcceleration_Y_CALLBACK Callback);
void get_LinearAcceleration_Y_Stub(CMOCK_get_LinearAcceleration_Y_CALLBACK Callback);
#define get_LinearAcceleration_Y_StubWithCallback get_LinearAcceleration_Y_Stub
#define get_LinearAcceleration_Y_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_LinearAcceleration_Y requires _ExpectWithArrayAndReturn");
#define get_LinearAcceleration_Y_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_LinearAcceleration_Y_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_LinearAcceleration_Y_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_LinearAcceleration_Z_Expect(sensor) TEST_FAIL_MESSAGE("get_LinearAcceleration_Z requires _ExpectAndReturn");
#define get_LinearAcceleration_Z_ExpectAndReturn(sensor, cmock_retval) get_LinearAcceleration_Z_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_LinearAcceleration_Z_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_LinearAcceleration_Z_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_LinearAcceleration_Z_AddCallback(CMOCK_get_LinearAcceleration_Z_CALLBACK Callback);
void get_LinearAcceleration_Z_Stub(CMOCK_get_LinearAcceleration_Z_CALLBACK Callback);
#define get_LinearAcceleration_Z_StubWithCallback get_LinearAcceleration_Z_Stub
#define get_LinearAcceleration_Z_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_LinearAcceleration_Z requires _ExpectWithArrayAndReturn");
#define get_LinearAcceleration_Z_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_LinearAcceleration_Z_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_LinearAcceleration_Z_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_LinearAcceleration_Accuracy_Expect(sensor) TEST_FAIL_MESSAGE("get_LinearAcceleration_Accuracy requires _ExpectAndReturn");
#define get_LinearAcceleration_Accuracy_ExpectAndReturn(sensor, cmock_retval) get_LinearAcceleration_Accuracy_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_LinearAcceleration_Accuracy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_LinearAcceleration_Accuracy_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_LinearAcceleration_Accuracy_AddCallback(CMOCK_get_LinearAcceleration_Accuracy_CALLBACK Callback);
void get_LinearAcceleration_Accuracy_Stub(CMOCK_get_LinearAcceleration_Accuracy_CALLBACK Callback);
#define get_LinearAcceleration_Accuracy_StubWithCallback get_LinearAcceleration_Accuracy_Stub
#define get_LinearAcceleration_Accuracy_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_LinearAcceleration_Accuracy requires _ExpectWithArrayAndReturn");
#define get_LinearAcceleration_Accuracy_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_LinearAcceleration_Accuracy_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_LinearAcceleration_Accuracy_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define get_Gravity_X_Expect(sensor) TEST_FAIL_MESSAGE("get_Gravity_X requires _ExpectAndReturn");
#define get_Gravity_X_ExpectAndReturn(sensor, cmock_retval) get_Gravity_X_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Gravity_X_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Gravity_X_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Gravity_X_AddCallback(CMOCK_get_Gravity_X_CALLBACK Callback);
void get_Gravity_X_Stub(CMOCK_get_Gravity_X_CALLBACK Callback);
#define get_Gravity_X_StubWithCallback get_Gravity_X_Stub
#define get_Gravity_X_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Gravity_X requires _ExpectWithArrayAndReturn");
#define get_Gravity_X_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Gravity_X_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Gravity_X_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Gravity_Y_Expect(sensor) TEST_FAIL_MESSAGE("get_Gravity_Y requires _ExpectAndReturn");
#define get_Gravity_Y_ExpectAndReturn(sensor, cmock_retval) get_Gravity_Y_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Gravity_Y_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Gravity_Y_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Gravity_Y_AddCallback(CMOCK_get_Gravity_Y_CALLBACK Callback);
void get_Gravity_Y_Stub(CMOCK_get_Gravity_Y_CALLBACK Callback);
#define get_Gravity_Y_StubWithCallback get_Gravity_Y_Stub
#define get_Gravity_Y_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Gravity_Y requires _ExpectWithArrayAndReturn");
#define get_Gravity_Y_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Gravity_Y_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Gravity_Y_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Gravity_Z_Expect(sensor) TEST_FAIL_MESSAGE("get_Gravity_Z requires _ExpectAndReturn");
#define get_Gravity_Z_ExpectAndReturn(sensor, cmock_retval) get_Gravity_Z_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Gravity_Z_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Gravity_Z_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Gravity_Z_AddCallback(CMOCK_get_Gravity_Z_CALLBACK Callback);
void get_Gravity_Z_Stub(CMOCK_get_Gravity_Z_CALLBACK Callback);
#define get_Gravity_Z_StubWithCallback get_Gravity_Z_Stub
#define get_Gravity_Z_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Gravity_Z requires _ExpectWithArrayAndReturn");
#define get_Gravity_Z_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Gravity_Z_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Gravity_Z_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Gravity_Accuracy_Expect(sensor) TEST_FAIL_MESSAGE("get_Gravity_Accuracy requires _ExpectAndReturn");
#define get_Gravity_Accuracy_ExpectAndReturn(sensor, cmock_retval) get_Gravity_Accuracy_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Gravity_Accuracy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_Gravity_Accuracy_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Gravity_Accuracy_AddCallback(CMOCK_get_Gravity_Accuracy_CALLBACK Callback);
void get_Gravity_Accuracy_Stub(CMOCK_get_Gravity_Accuracy_CALLBACK Callback);
#define get_Gravity_Accuracy_StubWithCallback get_Gravity_Accuracy_Stub
#define get_Gravity_Accuracy_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Gravity_Accuracy requires _ExpectWithArrayAndReturn");
#define get_Gravity_Accuracy_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Gravity_Accuracy_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Gravity_Accuracy_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define get_Quat_I_Expect(sensor) TEST_FAIL_MESSAGE("get_Quat_I requires _ExpectAndReturn");
#define get_Quat_I_ExpectAndReturn(sensor, cmock_retval) get_Quat_I_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Quat_I_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Quat_I_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Quat_I_AddCallback(CMOCK_get_Quat_I_CALLBACK Callback);
void get_Quat_I_Stub(CMOCK_get_Quat_I_CALLBACK Callback);
#define get_Quat_I_StubWithCallback get_Quat_I_Stub
#define get_Quat_I_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Quat_I requires _ExpectWithArrayAndReturn");
#define get_Quat_I_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Quat_I_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Quat_I_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Quat_J_Expect(sensor) TEST_FAIL_MESSAGE("get_Quat_J requires _ExpectAndReturn");
#define get_Quat_J_ExpectAndReturn(sensor, cmock_retval) get_Quat_J_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Quat_J_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Quat_J_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Quat_J_AddCallback(CMOCK_get_Quat_J_CALLBACK Callback);
void get_Quat_J_Stub(CMOCK_get_Quat_J_CALLBACK Callback);
#define get_Quat_J_StubWithCallback get_Quat_J_Stub
#define get_Quat_J_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Quat_J requires _ExpectWithArrayAndReturn");
#define get_Quat_J_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Quat_J_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Quat_J_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Quat_K_Expect(sensor) TEST_FAIL_MESSAGE("get_Quat_K requires _ExpectAndReturn");
#define get_Quat_K_ExpectAndReturn(sensor, cmock_retval) get_Quat_K_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Quat_K_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Quat_K_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Quat_K_AddCallback(CMOCK_get_Quat_K_CALLBACK Callback);
void get_Quat_K_Stub(CMOCK_get_Quat_K_CALLBACK Callback);
#define get_Quat_K_StubWithCallback get_Quat_K_Stub
#define get_Quat_K_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Quat_K requires _ExpectWithArrayAndReturn");
#define get_Quat_K_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Quat_K_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Quat_K_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Quat_Real_Expect(sensor) TEST_FAIL_MESSAGE("get_Quat_Real requires _ExpectAndReturn");
#define get_Quat_Real_ExpectAndReturn(sensor, cmock_retval) get_Quat_Real_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Quat_Real_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Quat_Real_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Quat_Real_AddCallback(CMOCK_get_Quat_Real_CALLBACK Callback);
void get_Quat_Real_Stub(CMOCK_get_Quat_Real_CALLBACK Callback);
#define get_Quat_Real_StubWithCallback get_Quat_Real_Stub
#define get_Quat_Real_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Quat_Real requires _ExpectWithArrayAndReturn");
#define get_Quat_Real_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Quat_Real_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Quat_Real_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Quat_Radian_Accuracy_Expect(sensor) TEST_FAIL_MESSAGE("get_Quat_Radian_Accuracy requires _ExpectAndReturn");
#define get_Quat_Radian_Accuracy_ExpectAndReturn(sensor, cmock_retval) get_Quat_Radian_Accuracy_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Quat_Radian_Accuracy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, float cmock_to_return);
typedef float (* CMOCK_get_Quat_Radian_Accuracy_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Quat_Radian_Accuracy_AddCallback(CMOCK_get_Quat_Radian_Accuracy_CALLBACK Callback);
void get_Quat_Radian_Accuracy_Stub(CMOCK_get_Quat_Radian_Accuracy_CALLBACK Callback);
#define get_Quat_Radian_Accuracy_StubWithCallback get_Quat_Radian_Accuracy_Stub
#define get_Quat_Radian_Accuracy_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Quat_Radian_Accuracy requires _ExpectWithArrayAndReturn");
#define get_Quat_Radian_Accuracy_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Quat_Radian_Accuracy_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Quat_Radian_Accuracy_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, float cmock_to_return);
#define get_Quat_Accuracy_Expect(sensor) TEST_FAIL_MESSAGE("get_Quat_Accuracy requires _ExpectAndReturn");
#define get_Quat_Accuracy_ExpectAndReturn(sensor, cmock_retval) get_Quat_Accuracy_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Quat_Accuracy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_Quat_Accuracy_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Quat_Accuracy_AddCallback(CMOCK_get_Quat_Accuracy_CALLBACK Callback);
void get_Quat_Accuracy_Stub(CMOCK_get_Quat_Accuracy_CALLBACK Callback);
#define get_Quat_Accuracy_StubWithCallback get_Quat_Accuracy_Stub
#define get_Quat_Accuracy_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Quat_Accuracy requires _ExpectWithArrayAndReturn");
#define get_Quat_Accuracy_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Quat_Accuracy_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Quat_Accuracy_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define get_StabilityClassifier_Expect(sensor) TEST_FAIL_MESSAGE("get_StabilityClassifier requires _ExpectAndReturn");
#define get_StabilityClassifier_ExpectAndReturn(sensor, cmock_retval) get_StabilityClassifier_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_StabilityClassifier_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_StabilityClassifier_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_StabilityClassifier_AddCallback(CMOCK_get_StabilityClassifier_CALLBACK Callback);
void get_StabilityClassifier_Stub(CMOCK_get_StabilityClassifier_CALLBACK Callback);
#define get_StabilityClassifier_StubWithCallback get_StabilityClassifier_Stub
#define get_StabilityClassifier_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_StabilityClassifier requires _ExpectWithArrayAndReturn");
#define get_StabilityClassifier_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_StabilityClassifier_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_StabilityClassifier_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define update_TapDetector_ExpectAndReturn(sensor, cmock_retval) TEST_FAIL_MESSAGE("update_TapDetector requires _Expect (not AndReturn)");
#define update_TapDetector_Expect(sensor) update_TapDetector_CMockExpect(__LINE__, sensor)
void update_TapDetector_CMockExpect(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor);
typedef void (* CMOCK_update_TapDetector_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void update_TapDetector_AddCallback(CMOCK_update_TapDetector_CALLBACK Callback);
void update_TapDetector_Stub(CMOCK_update_TapDetector_CALLBACK Callback);
#define update_TapDetector_StubWithCallback update_TapDetector_Stub
#define update_TapDetector_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) TEST_FAIL_MESSAGE("update_TapDetector requires _ExpectWithArray (not AndReturn)");
#define update_TapDetector_ExpectWithArray(sensor, sensor_Depth) update_TapDetector_CMockExpectWithArray(__LINE__, sensor, (sensor_Depth))
void update_TapDetector_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth);
#define get_ProductID_Expect(sensor) TEST_FAIL_MESSAGE("get_ProductID requires _ExpectAndReturn");
#define get_ProductID_ExpectAndReturn(sensor, cmock_retval) get_ProductID_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_ProductID_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_ProductID_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_ProductID_AddCallback(CMOCK_get_ProductID_CALLBACK Callback);
void get_ProductID_Stub(CMOCK_get_ProductID_CALLBACK Callback);
#define get_ProductID_StubWithCallback get_ProductID_Stub
#define get_ProductID_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_ProductID requires _ExpectWithArrayAndReturn");
#define get_ProductID_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_ProductID_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_ProductID_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define get_Reset_Reason_Expect(sensor) TEST_FAIL_MESSAGE("get_Reset_Reason requires _ExpectAndReturn");
#define get_Reset_Reason_ExpectAndReturn(sensor, cmock_retval) get_Reset_Reason_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_Reset_Reason_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_Reset_Reason_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_Reset_Reason_AddCallback(CMOCK_get_Reset_Reason_CALLBACK Callback);
void get_Reset_Reason_Stub(CMOCK_get_Reset_Reason_CALLBACK Callback);
#define get_Reset_Reason_StubWithCallback get_Reset_Reason_Stub
#define get_Reset_Reason_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_Reset_Reason requires _ExpectWithArrayAndReturn");
#define get_Reset_Reason_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_Reset_Reason_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_Reset_Reason_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define check_Connection_IMU_Expect(sensor) TEST_FAIL_MESSAGE("check_Connection_IMU requires _ExpectAndReturn");
#define check_Connection_IMU_ExpectAndReturn(sensor, cmock_retval) check_Connection_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void check_Connection_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_check_Connection_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void check_Connection_IMU_AddCallback(CMOCK_check_Connection_IMU_CALLBACK Callback);
void check_Connection_IMU_Stub(CMOCK_check_Connection_IMU_CALLBACK Callback);
#define check_Connection_IMU_StubWithCallback check_Connection_IMU_Stub
#define check_Connection_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("check_Connection_IMU requires _ExpectWithArrayAndReturn");
#define check_Connection_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) check_Connection_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void check_Connection_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define tare_IMU_Expect(sensor, all_Axis) TEST_FAIL_MESSAGE("tare_IMU requires _ExpectAndReturn");
#define tare_IMU_ExpectAndReturn(sensor, all_Axis, cmock_retval) tare_IMU_CMockExpectAndReturn(__LINE__, sensor, all_Axis, cmock_retval)
void tare_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, bool all_Axis, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_tare_IMU_CALLBACK)(sensor_meta* sensor, bool all_Axis, int cmock_num_calls);
void tare_IMU_AddCallback(CMOCK_tare_IMU_CALLBACK Callback);
void tare_IMU_Stub(CMOCK_tare_IMU_CALLBACK Callback);
#define tare_IMU_StubWithCallback tare_IMU_Stub
#define tare_IMU_ExpectWithArray(sensor, sensor_Depth, all_Axis) TEST_FAIL_MESSAGE("tare_IMU requires _ExpectWithArrayAndReturn");
#define tare_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, all_Axis, cmock_retval) tare_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), all_Axis, cmock_retval)
void tare_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, bool all_Axis, uint8_t cmock_to_return);
#define tare_persist_IMU_Expect(sensor) TEST_FAIL_MESSAGE("tare_persist_IMU requires _ExpectAndReturn");
#define tare_persist_IMU_ExpectAndReturn(sensor, cmock_retval) tare_persist_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void tare_persist_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_tare_persist_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void tare_persist_IMU_AddCallback(CMOCK_tare_persist_IMU_CALLBACK Callback);
void tare_persist_IMU_Stub(CMOCK_tare_persist_IMU_CALLBACK Callback);
#define tare_persist_IMU_StubWithCallback tare_persist_IMU_Stub
#define tare_persist_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("tare_persist_IMU requires _ExpectWithArrayAndReturn");
#define tare_persist_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) tare_persist_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void tare_persist_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define tare_set_reorientation_IMU_Expect(sensor) TEST_FAIL_MESSAGE("tare_set_reorientation_IMU requires _ExpectAndReturn");
#define tare_set_reorientation_IMU_ExpectAndReturn(sensor, cmock_retval) tare_set_reorientation_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void tare_set_reorientation_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_tare_set_reorientation_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void tare_set_reorientation_IMU_AddCallback(CMOCK_tare_set_reorientation_IMU_CALLBACK Callback);
void tare_set_reorientation_IMU_Stub(CMOCK_tare_set_reorientation_IMU_CALLBACK Callback);
#define tare_set_reorientation_IMU_StubWithCallback tare_set_reorientation_IMU_Stub
#define tare_set_reorientation_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("tare_set_reorientation_IMU requires _ExpectWithArrayAndReturn");
#define tare_set_reorientation_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) tare_set_reorientation_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void tare_set_reorientation_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define tare_clear_IMU_Expect(sensor) TEST_FAIL_MESSAGE("tare_clear_IMU requires _ExpectAndReturn");
#define tare_clear_IMU_ExpectAndReturn(sensor, cmock_retval) tare_clear_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void tare_clear_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_tare_clear_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void tare_clear_IMU_AddCallback(CMOCK_tare_clear_IMU_CALLBACK Callback);
void tare_clear_IMU_Stub(CMOCK_tare_clear_IMU_CALLBACK Callback);
#define tare_clear_IMU_StubWithCallback tare_clear_IMU_Stub
#define tare_clear_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("tare_clear_IMU requires _ExpectWithArrayAndReturn");
#define tare_clear_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) tare_clear_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void tare_clear_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define reinitialize_IMU_Expect(sensor) TEST_FAIL_MESSAGE("reinitialize_IMU requires _ExpectAndReturn");
#define reinitialize_IMU_ExpectAndReturn(sensor, cmock_retval) reinitialize_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void reinitialize_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_reinitialize_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void reinitialize_IMU_AddCallback(CMOCK_reinitialize_IMU_CALLBACK Callback);
void reinitialize_IMU_Stub(CMOCK_reinitialize_IMU_CALLBACK Callback);
#define reinitialize_IMU_StubWithCallback reinitialize_IMU_Stub
#define reinitialize_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("reinitialize_IMU requires _ExpectWithArrayAndReturn");
#define reinitialize_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) reinitialize_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void reinitialize_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define save_DCD_IMU_Expect(sensor) TEST_FAIL_MESSAGE("save_DCD_IMU requires _ExpectAndReturn");
#define save_DCD_IMU_ExpectAndReturn(sensor, cmock_retval) save_DCD_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void save_DCD_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_save_DCD_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void save_DCD_IMU_AddCallback(CMOCK_save_DCD_IMU_CALLBACK Callback);
void save_DCD_IMU_Stub(CMOCK_save_DCD_IMU_CALLBACK Callback);
#define save_DCD_IMU_StubWithCallback save_DCD_IMU_Stub
#define save_DCD_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("save_DCD_IMU requires _ExpectWithArrayAndReturn");
#define save_DCD_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) save_DCD_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void save_DCD_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define configure_ME_Calibration_IMU_Expect(sensor, enable_Accel_Cal, enable_Gyro_Cal, enable_Mag_Cal, enable_Planar_Accel_Cal, enable_On_Table_Cal) TEST_FAIL_MESSAGE("configure_ME_Calibration_IMU requires _ExpectAndReturn");
#define configure_ME_Calibration_IMU_ExpectAndReturn(sensor, enable_Accel_Cal, enable_Gyro_Cal, enable_Mag_Cal, enable_Planar_Accel_Cal, enable_On_Table_Cal, cmock_retval) configure_ME_Calibration_IMU_CMockExpectAndReturn(__LINE__, sensor, enable_Accel_Cal, enable_Gyro_Cal, enable_Mag_Cal, enable_Planar_Accel_Cal, enable_On_Table_Cal, cmock_retval)
void configure_ME_Calibration_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, bool enable_Accel_Cal, bool enable_Gyro_Cal, bool enable_Mag_Cal, bool enable_Planar_Accel_Cal, bool enable_On_Table_Cal, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_configure_ME_Calibration_IMU_CALLBACK)(sensor_meta* sensor, bool enable_Accel_Cal, bool enable_Gyro_Cal, bool enable_Mag_Cal, bool enable_Planar_Accel_Cal, bool enable_On_Table_Cal, int cmock_num_calls);
void configure_ME_Calibration_IMU_AddCallback(CMOCK_configure_ME_Calibration_IMU_CALLBACK Callback);
void configure_ME_Calibration_IMU_Stub(CMOCK_configure_ME_Calibration_IMU_CALLBACK Callback);
#define configure_ME_Calibration_IMU_StubWithCallback configure_ME_Calibration_IMU_Stub
#define configure_ME_Calibration_IMU_ExpectWithArray(sensor, sensor_Depth, enable_Accel_Cal, enable_Gyro_Cal, enable_Mag_Cal, enable_Planar_Accel_Cal, enable_On_Table_Cal) TEST_FAIL_MESSAGE("configure_ME_Calibration_IMU requires _ExpectWithArrayAndReturn");
#define configure_ME_Calibration_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, enable_Accel_Cal, enable_Gyro_Cal, enable_Mag_Cal, enable_Planar_Accel_Cal, enable_On_Table_Cal, cmock_retval) configure_ME_Calibration_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), enable_Accel_Cal, enable_Gyro_Cal, enable_Mag_Cal, enable_Planar_Accel_Cal, enable_On_Table_Cal, cmock_retval)
void configure_ME_Calibration_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, bool enable_Accel_Cal, bool enable_Gyro_Cal, bool enable_Mag_Cal, bool enable_Planar_Accel_Cal, bool enable_On_Table_Cal, uint8_t cmock_to_return);
#define get_ME_Calibration_Config_IMU_Expect(sensor) TEST_FAIL_MESSAGE("get_ME_Calibration_Config_IMU requires _ExpectAndReturn");
#define get_ME_Calibration_Config_IMU_ExpectAndReturn(sensor, cmock_retval) get_ME_Calibration_Config_IMU_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void get_ME_Calibration_Config_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_get_ME_Calibration_Config_IMU_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void get_ME_Calibration_Config_IMU_AddCallback(CMOCK_get_ME_Calibration_Config_IMU_CALLBACK Callback);
void get_ME_Calibration_Config_IMU_Stub(CMOCK_get_ME_Calibration_Config_IMU_CALLBACK Callback);
#define get_ME_Calibration_Config_IMU_StubWithCallback get_ME_Calibration_Config_IMU_Stub
#define get_ME_Calibration_Config_IMU_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("get_ME_Calibration_Config_IMU requires _ExpectWithArrayAndReturn");
#define get_ME_Calibration_Config_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) get_ME_Calibration_Config_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void get_ME_Calibration_Config_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t cmock_to_return);
#define config_periodic_DCD_IMU_Expect(sensor, enable_periodic_DCD) TEST_FAIL_MESSAGE("config_periodic_DCD_IMU requires _ExpectAndReturn");
#define config_periodic_DCD_IMU_ExpectAndReturn(sensor, enable_periodic_DCD, cmock_retval) config_periodic_DCD_IMU_CMockExpectAndReturn(__LINE__, sensor, enable_periodic_DCD, cmock_retval)
void config_periodic_DCD_IMU_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, bool enable_periodic_DCD, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_config_periodic_DCD_IMU_CALLBACK)(sensor_meta* sensor, bool enable_periodic_DCD, int cmock_num_calls);
void config_periodic_DCD_IMU_AddCallback(CMOCK_config_periodic_DCD_IMU_CALLBACK Callback);
void config_periodic_DCD_IMU_Stub(CMOCK_config_periodic_DCD_IMU_CALLBACK Callback);
#define config_periodic_DCD_IMU_StubWithCallback config_periodic_DCD_IMU_Stub
#define config_periodic_DCD_IMU_ExpectWithArray(sensor, sensor_Depth, enable_periodic_DCD) TEST_FAIL_MESSAGE("config_periodic_DCD_IMU requires _ExpectWithArrayAndReturn");
#define config_periodic_DCD_IMU_ExpectWithArrayAndReturn(sensor, sensor_Depth, enable_periodic_DCD, cmock_retval) config_periodic_DCD_IMU_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), enable_periodic_DCD, cmock_retval)
void config_periodic_DCD_IMU_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, bool enable_periodic_DCD, uint8_t cmock_to_return);
#define check_Command_Success_Expect(sensor, status_command) TEST_FAIL_MESSAGE("check_Command_Success requires _ExpectAndReturn");
#define check_Command_Success_ExpectAndReturn(sensor, status_command, cmock_retval) check_Command_Success_CMockExpectAndReturn(__LINE__, sensor, status_command, cmock_retval)
void check_Command_Success_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint8_t status_command, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_check_Command_Success_CALLBACK)(sensor_meta* sensor, uint8_t status_command, int cmock_num_calls);
void check_Command_Success_AddCallback(CMOCK_check_Command_Success_CALLBACK Callback);
void check_Command_Success_Stub(CMOCK_check_Command_Success_CALLBACK Callback);
#define check_Command_Success_StubWithCallback check_Command_Success_Stub
#define check_Command_Success_ExpectWithArray(sensor, sensor_Depth, status_command) TEST_FAIL_MESSAGE("check_Command_Success requires _ExpectWithArrayAndReturn");
#define check_Command_Success_ExpectWithArrayAndReturn(sensor, sensor_Depth, status_command, cmock_retval) check_Command_Success_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), status_command, cmock_retval)
void check_Command_Success_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint8_t status_command, uint8_t cmock_to_return);
#define deassert_csn_ExpectAndReturn(sensor, cmock_retval) TEST_FAIL_MESSAGE("deassert_csn requires _Expect (not AndReturn)");
#define deassert_csn_Expect(sensor) deassert_csn_CMockExpect(__LINE__, sensor)
void deassert_csn_CMockExpect(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor);
typedef void (* CMOCK_deassert_csn_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void deassert_csn_AddCallback(CMOCK_deassert_csn_CALLBACK Callback);
void deassert_csn_Stub(CMOCK_deassert_csn_CALLBACK Callback);
#define deassert_csn_StubWithCallback deassert_csn_Stub
#define deassert_csn_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) TEST_FAIL_MESSAGE("deassert_csn requires _ExpectWithArray (not AndReturn)");
#define deassert_csn_ExpectWithArray(sensor, sensor_Depth) deassert_csn_CMockExpectWithArray(__LINE__, sensor, (sensor_Depth))
void deassert_csn_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth);
#define parse_InputReport_Expect(sensor) TEST_FAIL_MESSAGE("parse_InputReport requires _ExpectAndReturn");
#define parse_InputReport_ExpectAndReturn(sensor, cmock_retval) parse_InputReport_CMockExpectAndReturn(__LINE__, sensor, cmock_retval)
void parse_InputReport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_parse_InputReport_CALLBACK)(sensor_meta* sensor, int cmock_num_calls);
void parse_InputReport_AddCallback(CMOCK_parse_InputReport_CALLBACK Callback);
void parse_InputReport_Stub(CMOCK_parse_InputReport_CALLBACK Callback);
#define parse_InputReport_StubWithCallback parse_InputReport_Stub
#define parse_InputReport_ExpectWithArray(sensor, sensor_Depth) TEST_FAIL_MESSAGE("parse_InputReport requires _ExpectWithArrayAndReturn");
#define parse_InputReport_ExpectWithArrayAndReturn(sensor, sensor_Depth, cmock_retval) parse_InputReport_CMockExpectWithArrayAndReturn(__LINE__, sensor, (sensor_Depth), cmock_retval)
void parse_InputReport_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sensor_meta* sensor, int sensor_Depth, uint16_t cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
